
ATTRIBUTE_GRAMMAR
  DEBUG True ;
  MODULE AG ;
  ATTRIBUTION_MODEL {
    attributed_module_name = AT
  ; normal_module_name = OK
  } ;

  AXIOM root ;

ATTRIBUTES
  pp : string ;
  value_ : int ;
END ;

RULE ROOT : r:root := e:expr
COMPUTE
  $[r].pp := $[e].pp ;
  $[r].value_ := $[e].value_ ;
END
;

RULE ADD : sum:expr := l:expr and r:expr
COMPUTE
  $[sum].pp := "("^ $[l].pp ^" + "^ $[r].pp ^")" ;
  $[sum].value_ := $[l].value_ + $[r].value_ ;
END
;

RULE SUB : dff:expr := l:expr and r:expr
COMPUTE
  $[dff].pp := "("^ $[l].pp ^" - "^ $[r].pp ^")" ;
  $[dff].value_ := $[l].value_ - $[r].value_ ;
END
;

RULE MUL : prd:expr := l:expr and r:expr
COMPUTE
  $[prd].pp := "("^ $[l].pp ^" * "^ $[r].pp ^")" ;
  $[prd].value_ := $[l].value_ * $[r].value_ ;
END
;

RULE DIV : quo:expr := l:expr and r:expr
COMPUTE
  $[quo].pp := "("^ $[l].pp ^" / "^ $[r].pp ^")" ;
  $[quo].value_ := $[l].value_ / $[r].value_ ;
END
;

RULE INT : e:expr := i:int
COMPUTE
  $[e].pp := string_of_int $[i] ;
  $[e].value_ := $[i] ;
END
;

END ;

value gram = Grammar.gcreate (Plexer.gmake ());
value root_eoi = Grammar.Entry.create gram "root_eoi";
open AT ;

EXTEND
  GLOBAL: root_eoi ;

  root: [ [
    e = expr -> make_root__ROOT e
  ] ] ;

  expr: [
    "+" [
      e1 = expr ; "+" ; e2 = expr -> make_expr__ADD e1 e2
    | e1 = expr ; "-" ; e2 = expr -> make_expr__SUB e1 e2
    ]
  | "*" [
      e1 = expr ; "*" ; e2 = expr -> make_expr__MUL e1 e2
    | e1 = expr ; "/" ; e2 = expr -> make_expr__DIV e1 e2
    ]
  | "simple" [
      n = INT -> make_expr__INT (int_of_string n)
    | "(" ; e = expr ; ")" -> e
    ]
  ] ;

  root_eoi: [ [ v = root; EOI -> v ] ];

END;

value pa_root s =
  s
  |> Stream.of_string
  |> Grammar.Entry.parse root_eoi
;

open OUnit2 ;

value test_simple_topological ctxt = do {
  assert_equal ~{printer=[%show: (string * int)]}
    ("(1 + (2 * 3))",7)
   ({foo| 1 + 2 * 3 |foo} |> pa_root |> AG.Topological.evaluate)
}
;

value test_simple_ordered ctxt = do {
  assert_equal ~{printer=[%show: (string * int)]}
    ("(1 + (2 * 3))",7)
   ({foo| 1 + 2 * 3 |foo} |> pa_root |> AG.Ordered.evaluate)
}
;

value suite = "silver_dc" >::: [
  "test_simple_topological"           >:: test_simple_topological
; "test_simple_ordered"           >:: test_simple_ordered
]
;

if not Sys.interactive.val then
  run_test_tt_main suite
else ()
;

(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
