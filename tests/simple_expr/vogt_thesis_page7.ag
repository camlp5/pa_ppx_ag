

(*
lookup id (i; n) : l = if (id = i) then n else (lookup id l)
lookup id [ ] = errorvalue
*)

value rec lookup id = fun [
  [(i,n) :: l] -> if id = i then n else lookup id l
| [] -> failwith "lookup"
] ;

ATTRIBUTE_GRAMMAR
  DEBUG True ;
  MODULE AG ;
  ATTRIBUTION_MODEL Attributed {
    attributed_module_name = AT
  } ;

  AXIOM root ;

ATTRIBUTES
  env : list (string * int) ;
  seq : list int ;
  number : int ;
  name : string ;
END ;

(*
ROOT ::= block DECLS APPS
APPS.env := DECLS.env
ROOT.seq := APPS.seq
*)
RULE BLOCK : root := decls and apps
COMPUTE
  $[2].env := $[1].env ;
  $[0].seq := $[2].seq ;
END
;

(*
DECLS ::= def DECLS ID
DECLS 0:number := DECLS 1:number + 1
DECLS 0:env := [(ID.name; DECLS 0:number )] ++ DECLS 1:env
| empty decls
DECLS.number := 0
DECLS.env := [ ]
*)
RULE DEF : decls := decls and id
COMPUTE
  $[0].number := $[1].number + 1 ;
  $[0].env := [ ($[2].name, $[0].number) :: $[1].env] ;
END
;

RULE EMPTY_DECLS : decls
COMPUTE
  $[0].number := 0 ;
  $[0].env := [] ;
END
;

(*
APPS ::= use APPS ID
APPS 0:seq := APPS 1:seq ++ [(lookup ID.name APPS 0:env )]
APPS 1:env := APPS 0:env
| empty apps
APPS 0:seq := [ ]
*)
RULE USE : apps := apps and id
COMPUTE
  $[0].seq := $[1].seq @ [lookup $[2].name $[0].env] ;
  $[1].env := $[0].env ;
END
;

RULE EMPTY_APPS : apps
COMPUTE
  $[0].seq := [] ;
END
;

RULE ID : id := string
COMPUTE
  $[0].name := $[1] ;
END
;

END ;

value gram = Grammar.gcreate (Plexer.gmake ());
value root_eoi = Grammar.Entry.create gram "root_eoi";
open AT ;

EXTEND
  GLOBAL: root_eoi ;

  root : [ [
    "let" ; d = decls ; "in" ; a = apps ; "end" -> make_root__BLOCK d a
  ] ] ;

  decls : [ [
    d = decls ; "," ; i = id -> make_decls__DEF d i
  | i = id -> make_decls__DEF (make_decls__EMPTY_DECLS()) i
  | -> make_decls__EMPTY_DECLS ()
  ] ] ;

  apps : [ [
    a = apps ; "," ; i = id -> make_apps__USE a i
  | i = id -> make_apps__USE (make_apps__EMPTY_APPS ()) i
  | -> make_apps__EMPTY_APPS ()
  ] ] ;

  id : [ [ i = LIDENT -> make_id__ID i ]] ;

  root_eoi: [ [ v = root; EOI -> v ] ];

END;

value pa_root s =
  s
  |> Stream.of_string
  |> Grammar.Entry.parse root_eoi
;

open OUnit2 ;

value test_simple ctxt =
  assert_equal ~{printer=[%show: list int]}
    [1; 3; 3; 2]
   ({foo| let a,b,c in a,c,c,b end |foo} |> pa_root |> AG.evaluate)
; assert_equal ~{printer=[%show: list int]}
    []
   ({foo| let in  end |foo} |> pa_root |> AG.evaluate)
; assert_equal ~{printer=[%show: list int]}
    [1;1]
   ({foo| let a in a,a end |foo} |> pa_root |> AG.evaluate)
;

value suite = "vogt_thesis_page7" >::: [
    "test_simple"           >:: test_simple
]
;

if not Sys.interactive.val then
  run_test_tt_main suite
else ()
;

(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
