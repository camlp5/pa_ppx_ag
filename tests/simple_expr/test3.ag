
module REC = struct

value global_ref = ref [] ;

ATTRIBUTE_GRAMMAR
  DEBUG True ;
  MODULE AG ;
  ATTRIBUTION_MODEL Attributed {
    attributed_module_name = AT
  } ;

  AXIOM prog ;

ATTRIBUTE value_ : int ;
CHAIN rpn : list string ;

ATTRIBUTES
  bin_oper : int -> int -> int ;
  env : list (string * int) ;
  freevars : list string ;
  operator_text : string ;
  result : int ;
  rhs_must_be_nonzero : bool ;
  rpn_notation : list string ;
  un_oper : int -> int ;
END ;

RULE INT : expr := int
COMPUTE
  $[0].value_ := $[1] ;
  $[0].rpn := [(string_of_int $[1]) :: $[0].rpn] ;
END ;

RULE BINOP : expr := binop and expr and expr
COMPUTE
  $[0].value_ := $result ;
  $result := $[1].bin_oper $[2].value_ $[3].value_ ;
  $[0].rpn := [$[1].operator_text :: $[3].rpn] ;
  condition "rhs must be nonzero"
    (if $[1].rhs_must_be_nonzero then
       0 <> $[3].value_
     else True) ;
END ;

RULE UNOP : expr := unop and expr
COMPUTE
  $[0].value_ := $[1].un_oper $[2].value_ ;
  $[0].rpn := [$[1].operator_text :: $[2].rpn] ;
END ;

RULE REF : expr := ref_expr
COMPUTE
  $[0].value_ := $[1].value_ ;
END ;

RULE SEQ : expr := expr and expr
COMPUTE
  $[0].value_ := $[2].value_ ;
  $[0].rpn := [";" :: $[2].rpn] ;
END ;

RULE LET : expr := let_expr
COMPUTE
  $[0].value_ := $[1].value_ ;
  $[0].rpn := $[1].rpn ;
END ;

RULE LET_BINDING : let_expr := string and expr and let_body
COMPUTE
  $[0].value_ := $[3].value_ ;
  $[3].rpn := [(Printf.sprintf "bind %s" $[1]) :: $[2].rpn] ;
  $[3].env := [($[1], $[2].value_) :: INCLUDING ( block1.env, let_body.env )] ;
  $[0].freevars :=
    Std.union
      (CONCAT (ref_expr.freevars, let_expr.freevars) IN $[2])
      (Std.except $[1] (CONCAT (ref_expr.freevars, let_expr.freevars) IN $[3])) ;
END ;

RULE LET_BODY : let_body := expr
COMPUTE
  $[0].value_ := $[1].value_ ;
  $[0].rpn := $[1].rpn ;
END ;

RULE REF_EXPR : ref_expr := string
COMPUTE
  $[0].value_ := List.assoc $[1] (INCLUDING (block1.env, let_body.env)) ;
  $[0].rpn := [$[1] :: $[0].rpn] ;
  $[0].freevars := [$[1]] ;
END ;

RULE UPLUS : unop
COMPUTE
  $[0].un_oper := (fun x -> x) ;
  $[0].operator_text := "unary+" ;
END ;

RULE UMINUS : unop
COMPUTE
  $[0].un_oper := (fun x -> (- x)) ;
  $[0].operator_text := "unary-" ;
END ;


RULE PLUS : binop
COMPUTE
  $[0].bin_oper := (+) ;
  $[0].rhs_must_be_nonzero := False ;
  $[0].operator_text := "+" ;
END ;

RULE MINUS : binop
COMPUTE
  $[0].bin_oper := (-) ;
  $[0].rhs_must_be_nonzero := False ;
  $[0].operator_text := "-" ;
END ;

RULE STAR : binop
COMPUTE
  $[0].bin_oper := (fun a b -> a*b) ;
  $[0].rhs_must_be_nonzero := False ;
  $[0].operator_text := "*" ;
END ;

RULE SLASH : binop
COMPUTE
  $[0].bin_oper := (fun a b -> if b = 0 then 0 else a / b) ;
  $[0].rhs_must_be_nonzero := True ;
  $[0].operator_text := "/" ;
END ;

RULE PERCENT : binop
COMPUTE
  $[0].bin_oper := (mod) ;
  $[0].rhs_must_be_nonzero := True ;
  $[0].operator_text := "%" ;
END ;

RULE BLOCK1 : block1 := block2
COMPUTE
  $[0].value_ := $[1].value_ ;
END ;


RULE BLOCK2 : block2 := expr
COMPUTE
  $[0].value_ := $[1].value_ ;
END ;


RULE PROG : prog := block1
COMPUTE
  $[1].env := [("x", 1); ("y", 2); ("z", 3); ("w", 4)] ;
  $[0].value_ := $[1].value_ ;
  CHAINSTART $[1].rpn := [] ;
  $[0].rpn_notation := List.rev $[1].rpn ;
  $[0].freevars := CONCAT (ref_expr.freevars, let_expr.freevars) IN $[1] ;
  Std.push global_ref "before" ;
  (let _ = $[0].value_ in Std.push global_ref "after") ;
END ;
END ;

end ;

open REC ;
open AT ;
value gram = Grammar.gcreate (Plexer.gmake ());
value expr = Grammar.Entry.create gram "expr";
value prog = Grammar.Entry.create gram "prog";
value prog_eoi = Grammar.Entry.create gram "prog_eoi";

EXTEND
  GLOBAL: expr prog prog_eoi;

  expr: [
    "top" [ e1 = expr ; ";" ; e2 = expr -> make_expr__SEQ e1 e2 ]
  | [ e1 = expr ; "+" ; e2 = expr -> make_expr__BINOP (make_binop__PLUS ()) e1 e2
    | e1 = expr ; "-" ; e2 = expr -> make_expr__BINOP (make_binop__MINUS()) e1 e2
    ]
  | [ e1 = expr ; "*" ; e2 = expr -> make_expr__BINOP (make_binop__STAR()) e1 e2
    | e1 = expr ; "/" ; e2 = expr -> make_expr__BINOP (make_binop__SLASH()) e1 e2
    | e1 = expr ; "%" ; e2 = expr -> make_expr__BINOP (make_binop__PERCENT()) e1 e2
    ]
  | [ "+" ; e = expr -> make_expr__UNOP (make_unop__UPLUS()) e
    | "-" ; e = expr -> make_expr__UNOP (make_unop__UMINUS()) e
    ]
  | [ n = INT -> make_expr__INT (int_of_string n)
    | id = LIDENT -> make_expr__REF (make_ref_expr__REF_EXPR id)
    | "(" ; e = expr ; ")" -> e
    | "let" ; id = LIDENT ; "=" ; e1 = expr LEVEL "top" ; "in" ; e2 = expr LEVEL "top" -> make_expr__LET (make_let_expr__LET_BINDING id e1 (make_let_body__LET_BODY e2))
    ]
  ]
  ;
  prog: [ [ x = expr; EOI -> make_prog__PROG (make_block1__BLOCK1 (make_block2__BLOCK2 x)) ] ];

  prog_eoi: [ [ x = prog; EOI -> x ] ];

END;

value pa_prog s =
  s
  |> Stream.of_string
  |> Grammar.Entry.parse prog_eoi
;

open OUnit2 ;

value test_records ctxt =
  let printer = [%show: (list string * list string * int)] in do {
  assert_equal ~{printer} (["x"; "y"], ["x"; "y"; "+"], 3) ({foo| x + y |foo} |> pa_prog |> AG.Topological.evaluate)
; assert_equal ~{printer} (["w"], ["1"; "w"; "+"], 5) ({foo| 1 + w |foo} |> pa_prog |> AG.Topological.evaluate)
; assert_equal ~{printer} ([], ["6"; "bind z"; "1"; "z"; "+"], 7) ({foo| let z = 6 in 1 + z |foo} |> pa_prog |> AG.Topological.evaluate)
; assert_equal ~{printer} (["w"], ["w"; "bind z"; "1"; "z"; "+"], 5) ({foo| let z = w in 1 + z |foo} |> pa_prog |> AG.Topological.evaluate)
}
;

value test_side_effect ctxt =
  let printer = [%show: (list string * list string * int)] in do {
    global_ref.val := [] ;
    assert_equal ~{printer} (["x"; "y"], ["x"; "y"; "+"], 3) ({foo| x + y |foo} |> pa_prog |> AG.Topological.evaluate) ;
    assert_equal ~{printer=[%show: list string]} ["after"; "before"] global_ref.val
  }
;

value suite = "test3" >::: [
    "test_records"           >:: test_records
  ; "test_side_effect"           >:: test_side_effect
  ]
;

if not Sys.interactive.val then
  run_test_tt_main suite
else ()
;
(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
